/** Declaration file generated by dts-gen */

export function exitHook(hook: any): any;

export function init(): void;

export function kill(err: any): void;

export function ready(): void;

export namespace exitHook {
    const prototype: {
    };

    function forceExitTimeout(ms: any): void;

    function hookEvent(event: any, code: any, filter: any, ...args: any[]): void;

    function hookedEvents(): any;

    function uncaughtExceptionHandler(hook: any): void;

    function unhandledRejectionHandler(hook: any): void;

    function unhookEvent(event: any): void;

    namespace forceExitTimeout {
        const prototype: {
        };

    }

    namespace hookEvent {
        const prototype: {
        };

    }

    namespace hookedEvents {
        const prototype: {
        };

    }

    namespace uncaughtExceptionHandler {
        const prototype: {
        };

    }

    namespace unhandledRejectionHandler {
        const prototype: {
        };

    }

    namespace unhookEvent {
        const prototype: {
        };

    }

}

export namespace io {
    class Entrypoint {
        constructor(...args: any[]);

        actions(...args: any[]): void;

        conf(...args: any[]): void;

        metrics(...args: any[]): void;

        onStart(...args: any[]): void;

        onStop(...args: any[]): void;

    }

    function action(...args: any[]): void;

    function backwardConfigConversion(...args: any[]): void;

    function counter(...args: any[]): void;

    function destroy(...args: any[]): void;

    function emit(...args: any[]): void;

    function expressErrorHandler(...args: any[]): void;

    function genericBackwardConversion(...args: any[]): void;

    function histogram(...args: any[]): void;

    function init(...args: any[]): void;

    function initActionsConf(...args: any[]): void;

    function initMetricsConf(...args: any[]): void;

    function initModule(...args: any[]): void;

    function meter(...args: any[]): void;

    function metric(...args: any[]): void;

    function metrics(...args: any[]): void;

    function notify(...args: any[]): void;

    function notifyError(...args: any[]): void;

    function onExit(...args: any[]): void;

    function probe(...args: any[]): void;

    function scopedAction(...args: any[]): void;

    function transpose(...args: any[]): void;

    namespace Entrypoint {
        namespace prototype {
            function actions(...args: any[]): void;

            function conf(...args: any[]): void;

            function metrics(...args: any[]): void;

            function onStart(...args: any[]): void;

            function onStop(...args: any[]): void;

        }

    }

    namespace actionsFeature {
        function action(...args: any[]): void;

        function check(...args: any[]): void;

        function destroy(...args: any[]): void;

        function init(...args: any[]): void;

        function listener(...args: any[]): void;

        function scopedAction(...args: any[]): void;

        namespace actionsService {
            const defaultConf: {
                profilingCpu: boolean;
                profilingHeap: boolean;
            };

            const services: Map;

            function destroy(...args: any[]): void;

            function get(...args: any[]): void;

            function init(...args: any[]): void;

        }

        namespace timer {
            function close(): any;

            function ref(): any;

            function refresh(): any;

            function unref(): any;

            namespace close {
                // Too-deep object hierarchy from uuid.io.actionsFeature.timer.close
                const prototype: any;

            }

            namespace ref {
                // Too-deep object hierarchy from uuid.io.actionsFeature.timer.ref
                const prototype: any;

            }

            namespace refresh {
                // Too-deep object hierarchy from uuid.io.actionsFeature.timer.refresh
                const prototype: any;

            }

            namespace unref {
                // Too-deep object hierarchy from uuid.io.actionsFeature.timer.unref
                const prototype: any;

            }

        }

    }

    namespace eventsFeature {
        function emit(...args: any[]): void;

        function init(...args: any[]): void;

    }

    namespace metricsFeature {
        const AVAILABLE_MEASUREMENTS: string[];

        const defaultAggregation: string;

        function counter(...args: any[]): void;

        function deleteMetric(...args: any[]): void;

        function destroy(...args: any[]): void;

        function histogram(...args: any[]): void;

        function init(...args: any[]): void;

        function meter(...args: any[]): void;

        function metric(...args: any[]): void;

        function transpose(...args: any[]): void;

        namespace metricService {
            const defaultConf: {
                eventLoopActive: boolean;
                eventLoopDelay: boolean;
                transaction: {
                    http: boolean;
                };
            };

            const services: Map;

            function destroyAll(...args: any[]): void;

            function get(...args: any[]): void;

            function init(...args: any[]): void;

            namespace metricsFeature {
                // Too-deep object hierarchy from uuid.io.metricsFeature.metricService.metricsFeature
                const AVAILABLE_MEASUREMENTS: any;

                // Too-deep object hierarchy from uuid.io.metricsFeature.metricService.metricsFeature
                const counter: any;

                // Too-deep object hierarchy from uuid.io.metricsFeature.metricService.metricsFeature
                const defaultAggregation: any;

                // Too-deep object hierarchy from uuid.io.metricsFeature.metricService.metricsFeature
                const deleteMetric: any;

                // Too-deep object hierarchy from uuid.io.metricsFeature.metricService.metricsFeature
                const destroy: any;

                // Too-deep object hierarchy from uuid.io.metricsFeature.metricService.metricsFeature
                const histogram: any;

                // Too-deep object hierarchy from uuid.io.metricsFeature.metricService.metricsFeature
                const init: any;

                // Too-deep object hierarchy from uuid.io.metricsFeature.metricService.metricsFeature
                const meter: any;

                // Too-deep object hierarchy from uuid.io.metricsFeature.metricService.metricsFeature
                const metric: any;

                // Too-deep object hierarchy from uuid.io.metricsFeature.metricService.metricsFeature
                const metricService: any;

                // Too-deep object hierarchy from uuid.io.metricsFeature.metricService.metricsFeature
                const transpose: any;

            }

        }

    }

    namespace notifyFeature {
        const levels: string[];

        const options: {
            catchExceptions: boolean;
            level: string;
        };

        function catchAll(...args: any[]): void;

        function destroy(...args: any[]): void;

        function expressErrorHandler(...args: any[]): void;

        function init(...args: any[]): void;

        function notifyError(...args: any[]): void;

    }

}

export namespace slack {
    function error(attachment: any, source: any): any;

    function info(attachment: any, source: any): any;

    function init(): any;

    function warn(attachment: any, source: any): any;

    namespace init {
        const prototype: {
        };

    }

}

export namespace status {
    function addMetric(name: any, defaultValue: any): any;

    namespace addMetric {
        const prototype: {
        };

    }

}

