/** Declaration file generated by dts-gen */

export function cleanUrl(url: any): any;

export function clone(obj: any): void;

export function decrypt(encrypted: any, decryptionKey: any): any;

export function deleteFile(args: any): any;

export function diff(objA: any, objB: any): void;

export function encrypt(decrypted: any, encryptionKey: any): any;

export function exec(cmd: any, args: any, opts: any): any;

export function exists(args: any): any;

export function extend(mergeInto: any, mergeFrom: any): void;

export function forEach(args: any): any;

export function forEachLimit(args: any): any;

export function forEachSeries(args: any): any;

export function forever(args: any): any;

export function format(args: any): any;

export function getDuration(start: any): any;

export function hash(input: any): any;

export function humanizeStatusCode(status: any): any;

export function makeRetryable(fn: any, opts: any): void;

export function map(args: any): any;

export function mapLimit(args: any): any;

export function mapSeries(args: any): any;

export function mapValues(args: any): any;

export function mkd(input: any, opts: any): any;

export function nextTick(): void;

export function pipe(fn: any): void;

export function promisify(original: any): any;

export function readFile(args: any): any;

export function readJson(filePath: any, options: any): void;

export function retry(fn: any, opts: any): void;

export function rm(patterns: any, opts: any): any;

export function saveFile(args: any): any;

export function saveJson(args: any): any;

export function shell(cmd: any, opts: any): void;

export function sortKeys(object: any, sortWith: any): any;

export function tap(fn: any): any;

export function wait(ms: any): any;

export function writeFile(filePath: any, data: any, opts: any): void;

export function writeJson(filePath: any, data: any, options: any): any;

export namespace assert {
    function checkDigit(input: any): any;

    function exists(path: any): void;

    function inEnumeration(args: any): any;

    function isAfter(entry: any, date: any): void;

    function isArray(entry: any): void;

    function isBefore(entry: any, date: any): void;

    function isBeforeToday(entry: any): void;

    function isCreditCard(entry: any): void;

    function isDate(args: any): any;

    function isEmail(entry: any): void;

    function isEmpty(entry: any): void;

    function isFunction(entry: any): void;

    function isIn(values: any): void;

    function isNil(entry: any): void;

    function isNumber(entry: any): void;

    function isObject(entry: any): void;

    function isOkStatus(entry: any): void;

    function isString(entry: any): void;

    function isValidDate(entry: any): void;

    function notDate(args: any): any;

    function notEmpty(entry: any): void;

    function notNil(entry: any): void;

    function notOkStatus(entry: any): void;

    function notValidDate(entry: any): void;

    namespace inEnumeration {
        const prototype: {
        };

    }

    namespace isDate {
        const prototype: {
        };

    }

    namespace notDate {
        const prototype: {
        };

    }

}

export namespace deleteFile {
    const prototype: {
    };

}

export namespace exec {
    function shell(cmd: any, opts: any): void;

    function shellSync(cmd: any, opts: any): void;

    function stderr(args: any): void;

    function stdout(args: any): void;

    function sync(cmd: any, args: any, opts: any): any;

}

export namespace exists {
    const prototype: {
    };

}

export namespace forEach {
    const prototype: {
    };

}

export namespace forEachLimit {
    const prototype: {
    };

}

export namespace forEachSeries {
    const prototype: {
    };

}

export namespace forever {
    const prototype: {
    };

}

export namespace format {
    const prototype: {
    };

}

export namespace getDuration {
    const prototype: {
    };

}

export namespace map {
    const prototype: {
    };

}

export namespace mapLimit {
    const prototype: {
    };

}

export namespace mapSeries {
    const prototype: {
    };

}

export namespace mapValues {
    const prototype: {
    };

}

export namespace mkd {
    function sync(input: any, opts: any): any;

}

export namespace normalize {
    function day(input: any): void;

    function email(input: any): void;

    function header(input: any): void;

    function statusCode(status: any): any;

    function string(input: any): void;

}

export namespace promisify {
    const custom: any;

    const prototype: {
    };

}

export namespace readFile {
    const prototype: {
    };

}

export namespace readJson {
    // Circular reference from uuid.readJson
    const default: any;

    function sync(filePath: any, options: any): void;

}

export namespace rm {
    function sync(patterns: any, opts: any): any;

}

export namespace saveFile {
    const prototype: {
    };

    function sync(filePath: any, data: any, opts: any): void;

    namespace sync {
        const prototype: {
        };

    }

}

export namespace saveJson {
    const prototype: {
    };

    function sync(filePath: any, data: any, options: any): void;

}

export namespace sortKeys {
    const prototype: {
    };

}

export namespace wait {
    const prototype: {
    };

}

export namespace writeFile {
    function sync(filePath: any, data: any, opts: any): void;

    namespace sync {
        const prototype: {
        };

    }

}

export namespace writeJson {
    // Circular reference from uuid.writeJson
    const default: any;

    function sync(filePath: any, data: any, options: any): void;

}

